import re
from math import ceil
from typing import Union

from pyrogram import Client, filters, types
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message

import config
from config import BANNED_USERS, START_IMG_URL
from strings import get_command, get_string
from AlemMuzik import HELPABLE, app
from AlemMuzik.utils.database import get_lang, is_commanddelete_on
from AlemMuzik.utils.decorators.language import LanguageStart
from AlemMuzik.utils.inline.help import private_help_panel

### Command
HELP_COMMAND = get_command("HELP_COMMAND")

COLUMN_SIZE = 4
NUM_COLUMNS = 3



class EqInlineKeyboardButton(InlineKeyboardButton):
    def __eq__(self, other):
        return self.text == other.text

    def __lt__(self, other):
        return self.text < other.text

    def __gt__(self, other):
        return self.text > other.text


def paginate_modules(page_n, module_dict, prefix, chat=None, close: bool = False):
    if not chat:
        modules = sorted(
            [
                EqInlineKeyboardButton(
                    x.__MODULE__,
                    callback_data="{}_module({},{})".format(
                        prefix, x.__MODULE__.lower(), page_n
                    ),
                )
                for x in module_dict.values()
            ]
        )
    else:
        modules = sorted(
            [
                EqInlineKeyboardButton(
                    x.__MODULE__,
                    callback_data="{}_module({},{},{})".format(
                        prefix, chat, x.__MODULE__.lower(), page_n
                    ),
                )
                for x in module_dict.values()
            ]
        )

    pairs = [modules[i : i + NUM_COLUMNS] for i in range(0, len(modules), NUM_COLUMNS)]

    max_num_pages = ceil(len(pairs) / COLUMN_SIZE) if len(pairs) > 0 else 1
    modulo_page = page_n % max_num_pages

    if len(pairs) > COLUMN_SIZE:
        pairs = pairs[modulo_page * COLUMN_SIZE : COLUMN_SIZE * (modulo_page + 1)] + [
            (
                EqInlineKeyboardButton(
                    "‚ùÆ",
                    callback_data="{}_prev({})".format(
                        prefix,
                        modulo_page - 1 if modulo_page > 0 else max_num_pages - 1,
                    ),
                ),
                EqInlineKeyboardButton(
                    "·¥Ñ ü·¥ès·¥á" if close else "B·¥Ä·¥Ñ·¥ã",
                    callback_data="close" if close else "feature",
                ),
                EqInlineKeyboardButton(
                    "‚ùØ",
                    callback_data="{}_next({})".format(prefix, modulo_page + 1),
                ),
            )
        ]
    else:
        pairs.append(
            [
                EqInlineKeyboardButton(
                    "·¥Ñ ü·¥ès·¥á" if close else "B·¥Ä·¥Ñ·¥ã",
                    callback_data="close" if close else "feature",
                ),
            ]
        )

    return pairs


@app.on_message(filters.command(HELP_COMMAND) & filters.private & ~BANNED_USERS)
@app.on_callback_query(filters.regex("settings_back_helper") & ~BANNED_USERS)
async def helper_private(
    client: app, update: Union[types.Message, types.CallbackQuery]
):
    is_callback = isinstance(update, types.CallbackQuery)
    if is_callback:
        try:
            await update.answer()
        except:
            pass

        chat_id = update.message.chat.id
        language = await get_lang(chat_id)
        _ = get_string(language)
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))

        await update.edit_message_text(_["help_1"], reply_markup=keyboard)
    else:
        chat_id = update.chat.id
        if await is_commanddelete_on(update.chat.id):
            try:
                await update.delete()
            except:
                pass
        language = await get_lang(chat_id)
        _ = get_string(language)
        keyboard = InlineKeyboardMarkup(
            paginate_modules(0, HELPABLE, "help", close=True)
        )
        if START_IMG_URL:

            await update.reply_photo(
                photo=START_IMG_URL,
                caption=_["help_1"],
                reply_markup=keyboard,
            )

        else:

            await update.reply_text(
                text=_["help_1"],
                reply_markup=keyboard,
            )


@app.on_message(filters.command(HELP_COMMAND) & filters.group & ~BANNED_USERS)
@LanguageStart
async def help_com_group(client, message: Message, _):
    keyboard = private_help_panel(_)
    await message.reply_text(_["help_2"], reply_markup=InlineKeyboardMarkup(keyboard))


async def help_parser(name, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    return keyboard


@app.on_callback_query(filters.regex(r"help_(.*?)"))
async def help_button(client, query):
    home_match = re.match(r"help_home\((.+?)\)", query.data)
    mod_match = re.match(r"help_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back\((\d+)\)", query.data)
    create_match = re.match(r"help_create", query.data)
    language = await get_lang(query.message.chat.id)
    _ = get_string(language)
    top_text = _["help_1"]

    if mod_match:
        module = mod_match.group(1)
        prev_page_num = int(mod_match.group(2))
        text = (
            f"<b><u>Yardƒ±m ƒ∞√ßin Buraya {HELPABLE[module].__MODULE__}:</u></b>\n"
            + HELPABLE[module].__HELP__
        )

        key = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text="‚Ü™Ô∏è ùêÜùêÑùêëùê¢¬∞", callback_data=f"help_back({prev_page_num})"
                    ),
                    InlineKeyboardButton(text="üîÑ ùêäùêÄùêèùêÄùêì¬∞", callback_data="close"),
                ],
            ]
        )

        await query.message.edit(
            text=text,
            reply_markup=key,
            disable_web_page_preview=True,
        )

    elif home_match:
        await app.send_message(
            query.from_user.id,
            text=home_text_pm,
            reply_markup=InlineKeyboardMarkup(out),
        )
        await query.message.delete()

    elif prev_match:
        curr_page = int(prev_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(curr_page, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif next_match:
        next_page = int(next_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(next_page, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif back_match:
        prev_page_num = int(back_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(prev_page_num, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif create_match:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))

        await query.message.edit(
            text=top_text,
            reply_markup=keyboard,
            disable_web_page_preview=True,
        )

    await client.answer_callback_query(query.id)


# ===================================

from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from config import BANNED_USERS
from strings import helpers
from AlemMuzik import app
from AlemMuzik.utils.decorators.language import languageCB


@app.on_callback_query(filters.regex("music_callback") & ~BANNED_USERS)
@languageCB
async def music_helper_cb(client, CallbackQuery, _):

    callback_data = CallbackQuery.data.strip()

    cb = callback_data.split(None, 1)[1]

    keyboard = back_to_music(_)

    if cb == "hb1":

        await CallbackQuery.edit_message_text(helpers.HELP_1, reply_markup=keyboard)

    elif cb == "hb2":

        await CallbackQuery.edit_message_text(helpers.HELP_2, reply_markup=keyboard)

    elif cb == "hb3":

        await CallbackQuery.edit_message_text(helpers.HELP_3, reply_markup=keyboard)

    elif cb == "hb4":

        await CallbackQuery.edit_message_text(helpers.HELP_4, reply_markup=keyboard)

    elif cb == "hb5":

        await CallbackQuery.edit_message_text(helpers.HELP_5, reply_markup=keyboard)

    elif cb == "hb6":

        await CallbackQuery.edit_message_text(helpers.HELP_6, reply_markup=keyboard)

    elif cb == "hb7":

        await CallbackQuery.edit_message_text(helpers.HELP_7, reply_markup=keyboard)

    elif cb == "hb8":

        await CallbackQuery.edit_message_text(helpers.HELP_8, reply_markup=keyboard)

    elif cb == "hb9":

        await CallbackQuery.edit_message_text(helpers.HELP_9, reply_markup=keyboard)

    elif cb == "hb10":

        await CallbackQuery.edit_message_text(helpers.HELP_10, reply_markup=keyboard)

    elif cb == "hb11":

        await CallbackQuery.edit_message_text(helpers.HELP_11, reply_markup=keyboard)

    elif cb == "hb12":

        await CallbackQuery.edit_message_text(helpers.HELP_12, reply_markup=keyboard)

    elif cb == "hb13":

        await CallbackQuery.edit_message_text(helpers.HELP_13, reply_markup=keyboard)

    elif cb == "hb14":

        await CallbackQuery.edit_message_text(helpers.HELP_14, reply_markup=keyboard)

    elif cb == "hb15":

        await CallbackQuery.edit_message_text(helpers.HELP_15, reply_markup=keyboard)


@app.on_callback_query(filters.regex("management_callback") & ~BANNED_USERS)
@languageCB
async def management_callback_cb(client, CallbackQuery, _):

    callback_data = CallbackQuery.data.strip()

    cb = callback_data.split(None, 1)[1]

    keyboard = back_to_management(_)

    if cb == "extra":

        await CallbackQuery.edit_message_text(helpers.EXTRA_1, reply_markup=keyboard)

    elif cb == "hb1":

        await CallbackQuery.edit_message_text(helpers.MHELP_1, reply_markup=keyboard)

    elif cb == "hb2":

        await CallbackQuery.edit_message_text(helpers.MHELP_2, reply_markup=keyboard)

    elif cb == "hb3":

        await CallbackQuery.edit_message_text(helpers.MHELP_3, reply_markup=keyboard)

    elif cb == "hb4":

        await CallbackQuery.edit_message_text(helpers.MHELP_4, reply_markup=keyboard)

    elif cb == "hb5":

        await CallbackQuery.edit_message_text(helpers.MHELP_5, reply_markup=keyboard)

    elif cb == "hb6":

        await CallbackQuery.edit_message_text(helpers.MHELP_6, reply_markup=keyboard)

    elif cb == "hb7":

        await CallbackQuery.edit_message_text(helpers.MHELP_7, reply_markup=keyboard)

    elif cb == "hb8":

        await CallbackQuery.edit_message_text(helpers.MHELP_8, reply_markup=keyboard)

    elif cb == "hb9":

        await CallbackQuery.edit_message_text(helpers.MHELP_9, reply_markup=keyboard)

    elif cb == "hb10":

        await CallbackQuery.edit_message_text(helpers.MHELP_10, reply_markup=keyboard)

    elif cb == "hb11":

        await CallbackQuery.edit_message_text(helpers.MHELP_11, reply_markup=keyboard)

    elif cb == "hb12":

        await CallbackQuery.edit_message_text(helpers.MHELP_12, reply_markup=keyboard)


@app.on_callback_query(filters.regex("tools_callback") & ~BANNED_USERS)
@languageCB
async def tools_callback_cb(client, CallbackQuery, _):

    callback_data = CallbackQuery.data.strip()

    cb = callback_data.split(None, 1)[1]

    keyboard = back_to_tools(_)

    if cb == "ai":

        await CallbackQuery.edit_message_text(helpers.AI_1, reply_markup=keyboard)

    elif cb == "hb1":

        await CallbackQuery.edit_message_text(helpers.THELP_1, reply_markup=keyboard)

    elif cb == "hb2":

        await CallbackQuery.edit_message_text(helpers.THELP_2, reply_markup=keyboard)

    elif cb == "hb3":

        await CallbackQuery.edit_message_text(helpers.THELP_3, reply_markup=keyboard)

    elif cb == "hb4":

        await CallbackQuery.edit_message_text(helpers.THELP_4, reply_markup=keyboard)

    elif cb == "hb5":

        await CallbackQuery.edit_message_text(helpers.THELP_5, reply_markup=keyboard)

    elif cb == "hb6":

        await CallbackQuery.edit_message_text(helpers.THELP_6, reply_markup=keyboard)

    elif cb == "hb7":

        await CallbackQuery.edit_message_text(helpers.THELP_7, reply_markup=keyboard)

    elif cb == "hb8":

        await CallbackQuery.edit_message_text(helpers.THELP_8, reply_markup=keyboard)

    elif cb == "hb9":

        await CallbackQuery.edit_message_text(helpers.THELP_9, reply_markup=keyboard)

    elif cb == "hb10":

        await CallbackQuery.edit_message_text(helpers.THELP_10, reply_markup=keyboard)

    elif cb == "hb11":

        await CallbackQuery.edit_message_text(helpers.THELP_11, reply_markup=keyboard)

    elif cb == "hb12":

        await CallbackQuery.edit_message_text(helpers.THELP_12, reply_markup=keyboard)


@app.on_callback_query(filters.regex("developer"))
async def about_callback(client: Client, callback_query: CallbackQuery):
    buttons = [
        [
            InlineKeyboardButton(text="üî∞ ùêíùêÄùêáùêàÃáùêè¬∞ üî∞", user_id=config.OWNER_ID[0]),
            InlineKeyboardButton(
                text="üìç—É—î—Ç–∫ŒπÃá‚ÑìŒπÃáüìç", url=f"https://t.me/{app.username}?start=sudo"
            ),
        ],
        [
            InlineKeyboardButton(text="‚ú® …™…¥s·¥õ·¥Ä ‚ú®", url=f"https://www.instagram.com/AdanaliMuhendis/"),
            InlineKeyboardButton(text="‚ö°  è·¥è·¥ú·¥õ·¥ú ô·¥á ‚ö°", url=f"https://www.youtube.com/@AdanaliMuhendis"),
        ],
        [
            InlineKeyboardButton(text="üîô ùêÜùêÑùêëùê¢¬∞", callback_data="about")
        ],  # Use a default label for the back button
    ]
    await callback_query.message.edit_text(
        "‚ú¶ **ùêÅùêî ùêÅùêéùêì, ùêÜùêëùêîùêÅùêîùêçùêîùêôùêîùêç ùêòùêéÃàùêçùêÑùêìùêàÃáùêåùêàÃáùêçùêàÃá ùêäùêéùêãùêÄùêò ùêïùêÑ ùêÉùêÄùêáùêÄ ùêÑùêÜÃÜùêãùêÑùêçùêÇùêÑùêãùêàÃá ùêáùêÄùêãùêÑ ùêÜùêÑùêìùêàÃáùêëùêåùêÑùêä ùêàÃáùêÇÃßùêàÃáùêç ùêòùêÑùêìùêÑùêçùêÑùêäùêãùêàÃá ùêÜùêÑùêãùêàÃáùêíÃßùêìùêàÃáùêëùêàÃáùêÇùêàÃáùêãùêÑùêë ùêìùêÄùêëùêÄùêÖùêàùêçùêÉùêÄùêç ùêòùêÄùêèùêàùêãùêåùêàùêíÃßùêìùêàùêë.**\n\n‚ú¶ **sŒ±d—îc—î –≤√≠ÃárkŒ±cÃß t√≠klŒ±mŒ± √≠Ãál—î h—îr sÃß—î—á√≠Ãá kœÉntrœÉl —îd—î–≤√≠Ãál√≠Ãárs√≠Ãán√≠Ãáz‚Äî—ïŒ±–ΩŒπÃáœÅ Œ±—ÉŒ±—è‚ÑìŒ±—èŒπ–∏Œπ Œ±—ÉŒ±—è‚ÑìŒ±–ºŒ±–∫, —ÉœÉÃà–∏—î—ÇŒπÃá¬¢ŒπÃá‚Ñì—î—èŒπÃá –∫œÉ–∏—Ç—èœÉ‚Ñì —î—Ç–º—î–∫ ŒΩ—î –ΩŒ±—Ç—ÇŒ± Œπ–∏—ï—ÇŒ±g—èŒ±–º ŒΩ—î —ÉœÉœÖ—ÇœÖ–≤—î'œÖ –∫—î—ïÃßf—î—Ç–º—î–∫ gŒπÃá–≤ŒπÃá**\n\n‚ú¶ **ùô∞ùôªùô¥ùôº ùôºùöÑÃàùöâùô∏Ãáùô∫ ùô±ùôæùöÉ, ùô∂ùöÅùöÑùô±ùöÑùôΩùöÑùöâùöÑ ùöÇùôæùöÅùöÑùôΩùöÇùöÑùöâ ùô±ùô∏ÃáùöÅ ùöÇÃßùô¥ùô∫ùô∏Ãáùôªùô≥ùô¥ ùöàùôæÃàùôΩùô¥ùöÉùôºùô¥ùôΩùô∏Ãáùöâùô¥ ùöÖùô¥ ùôºùöÑÃàùöâùô∏Ãáùô∂ÃÜùô∏ÃáùôΩ ùô∫ùô¥ùöàùôµùô∏ÃáùôΩùô∏Ãá ùô≤Ãßùô∏ùô∫ùô∞ùöÅùôºùô∞ùôΩùô∏ùöâùô∞ ùöàùô∞ùöÅùô≥ùô∏ùôºùô≤ùô∏ ùôæùôªùôºùô∞ùô∫ ùô∏Ãáùô≤Ãßùô∏ÃáùôΩ ùöÉùô∞ùöÇùô∞ùöÅùôªùô∞ùôΩùô≥ùô∏. sŒ±d—îc—î Œ±sÃßŒ±gÃÜ√≠dŒ±k√≠Ãá duÃàgÃÜm—îl—îr√≠Ãá kullŒ±n√≠n v—î n—î kŒ±dŒ±r kœÉlŒ±—á œÉldugÃÜunu gœÉÃàruÃàn!**",
        reply_markup=InlineKeyboardMarkup(buttons),
    )


@app.on_callback_query(filters.regex("feature"))
async def feature_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚öúÔ∏è ùêÑùêäùêãùêÑ ùêÅùêÑùêçùêàÃá¬∞ ‚öúÔ∏è",
                url=f"https://t.me/{app.username}?startgroup=true",
            ),
        ],
        [
            InlineKeyboardButton(text=" ùêåùêîÃàùêôùêàÃáùêä¬∞ ", callback_data="music"),
            InlineKeyboardButton(text=" ùêòùêéÃàùêçùêÑùêìùêàÃáùêå¬∞ ", callback_data="management"),
        ],
        [
            InlineKeyboardButton(text=" ùêÄùêëùêÄùêÇÃßùêãùêÄùêë¬∞ ", callback_data="tools"),
            InlineKeyboardButton(text=" ùêáùêÑùêèùêíùêàÃá¬∞ ", callback_data="settings_back_helper"),
        ],
        [InlineKeyboardButton(text="‚úØ ùêÄùêçùêÄ ùêåùêÑùêçùêîÃà¬∞ ‚úØ", callback_data="go_to_start")],
    ]
    k = f"""**‚ùñ ùêáùêÑùêòùêòùêòùêé {app.mention} ! 

‚îÅ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ‚îÅ
‚ùñ ·¥õ ú…™s …™s œª·¥ßŒ∑·¥ß…¢—îœª—îŒ∑·¥õ | œªœÖs…™·¥Ñ  ôœÉ·¥õ
‚ùñ Œ∑œÉ  ü·¥ß…¢ | ·¥ß·¥Ös œªœÖs…™·¥Ñ | Œ∑œÉ ·¥ò ÄœÉœªœÉ
‚ùñ 24x7  ÄœÖŒ∑ |  ô—îs·¥õ sœÉœÖŒ∑·¥Ö «´œÖ·¥ß ü…™·¥õ è

Kƒ±saca ƒ∞yi Bot :)
‚îÅ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ‚îÅ
‚ùñ ·¥Ñ ü…™·¥Ñ·¥ã œÉŒ∑ ·¥õ ú—î  ú—î ü·¥©  ôœÖ·¥õ·¥õœÉŒ∑ ·¥õœÉ …¢—î·¥õ …™Œ∑“ìœÉ
    ·¥ß ôœÉœÖ·¥õ œª è œªœÉ·¥ÖœÖ ü—îs ·¥ßŒ∑·¥Ö ·¥ÑœÉœªœª·¥ßŒ∑·¥Ös...!

A≈üaƒüƒ±daki Butonlara Dikkat et...
‚îÅ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ‚îÅ**"""
    await callback_query.message.edit_text(
        text=k, reply_markup=InlineKeyboardMarkup(keyboard)
    )


@app.on_callback_query(filters.regex("music"))
async def music_callback(client: Client, callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(text="A·¥Ö·¥ç…™…¥", callback_data="music_callback hb1"),
                InlineKeyboardButton(text="A·¥ú·¥õ ú", callback_data="music_callback hb2"),
                InlineKeyboardButton(
                    text="B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ", callback_data="music_callback hb3"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="B ü-C ú·¥Ä·¥õ", callback_data="music_callback hb4"
                ),
                InlineKeyboardButton(
                    text="B ü-Us·¥á Ä", callback_data="music_callback hb5"
                ),
                InlineKeyboardButton(text="C-P ü·¥Ä è", callback_data="music_callback hb6"),
            ],
            [
                InlineKeyboardButton(text="G-B·¥Ä…¥", callback_data="music_callback hb7"),
                InlineKeyboardButton(text="L·¥è·¥è·¥ò", callback_data="music_callback hb8"),
                InlineKeyboardButton(
                    text="M·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á", callback_data="music_callback hb9"
                ),
            ],
            [
                InlineKeyboardButton(text="P…™…¥…¢", callback_data="music_callback hb10"),
                InlineKeyboardButton(text="P ü·¥Ä è", callback_data="music_callback hb11"),
                InlineKeyboardButton(
                    text="S ú·¥ú“ì“ì ü·¥á", callback_data="music_callback hb12"
                ),
            ],
            [
                InlineKeyboardButton(text="S·¥á·¥á·¥ã", callback_data="music_callback hb13"),
                InlineKeyboardButton(text="S·¥è…¥…¢", callback_data="music_callback hb14"),
                InlineKeyboardButton(text="S·¥ò·¥á·¥á·¥Ö", callback_data="music_callback hb15"),
            ],
            [InlineKeyboardButton(text="‚úØ  ùêÜùêÑùêëùê¢¬∞ ‚úØ", callback_data=f"feature")],
        ]
    )

    await callback_query.message.edit(
        f"``**dŒ±hŒ± fŒ±zlŒ± –≤√≠Ãálg√≠Ãá √≠ÃácÃß√≠Ãán Œ±sÃßŒ±gÃÜ√≠dŒ±k√≠Ãá –≤utœÉnlŒ±rŒ± t√≠klŒ±—á√≠n√≠z. h—îrhŒ±ng√≠Ãá –≤√≠Ãár sœÉrunlŒ± kŒ±rsÃß√≠lŒ±sÃß√≠—áœÉrsŒ±n√≠z –≤urŒ±—áŒ± —áŒ±z√≠n [s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.](t.me/SohbetAlemi)**\n\n**ùêÅùêîÃàùêìùêîÃàùêç ùêäùêéùêåùêîùêìùêãùêÄùêëùêà ùêÅùêî ùêíùêàÃáùêåùêÜùêÑ ùêàÃáùêãùêÑ ùêäùêîùêãùêãùêÄùêçùêàùêç: /**``",
        reply_markup=keyboard,
    )


@app.on_callback_query(filters.regex("management"))
async def management_callback(client: Client, callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text="—îx·¥õ Ä·¥ß", callback_data="management_callback extra"
                )
            ],
            [
                InlineKeyboardButton(
                    text=" ô·¥ßŒ∑", callback_data="management_callback hb1"
                ),
                InlineKeyboardButton(
                    text="·¥ã…™·¥Ñ·¥ãs", callback_data="management_callback hb2"
                ),
                InlineKeyboardButton(
                    text="œªœÖ·¥õ—î", callback_data="management_callback hb3"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="·¥ò…™Œ∑", callback_data="management_callback hb4"
                ),
                InlineKeyboardButton(
                    text="s·¥õ·¥ß“ì“ì", callback_data="management_callback hb5"
                ),
                InlineKeyboardButton(
                    text="s—î·¥õ œÖ·¥ò", callback_data="management_callback hb6"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="zœÉœª ô…™—î", callback_data="management_callback hb7"
                ),
                InlineKeyboardButton(
                    text="…¢·¥ßœª—î", callback_data="management_callback hb8"
                ),
                InlineKeyboardButton(
                    text="…™œª·¥òœÉs·¥õ—î Ä", callback_data="management_callback hb9"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="s·¥ßŒ∑…¢ œª·¥ß·¥õ·¥ß", callback_data="management_callback hb10"
                ),
                InlineKeyboardButton(
                    text="·¥õ Ä·¥ßŒ∑s ü·¥ß·¥õ—î", callback_data="management_callback hb11"
                ),
                InlineKeyboardButton(
                    text="·¥õ-…¢ Ä·¥ß·¥ò ú", callback_data="management_callback hb12"
                ),
            ],
            [InlineKeyboardButton(text="‚úØ  ùêÜùêÑùêëùê¢¬∞ ‚úØ", callback_data=f"feature")],
        ]
    )

    await callback_query.message.edit(
        f"``**dŒ±hŒ± fŒ±zlŒ± –≤√≠Ãálg√≠Ãá √≠ÃácÃß√≠Ãán Œ±sÃßŒ±gÃÜ√≠dŒ±k√≠Ãá –≤utœÉnlŒ±rŒ± t√≠klŒ±—á√≠n√≠z. h—îrhŒ±ng√≠Ãá –≤√≠Ãár sœÉrunlŒ± kŒ±rsÃß√≠lŒ±sÃß√≠—áœÉrsŒ±n√≠z –≤urŒ±—áŒ± —áŒ±z√≠n [s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.](t.me/SohbetAlemi)**\n\n**ùêÅùêîÃàùêìùêîÃàùêç ùêäùêéùêåùêîùêìùêãùêÄùêëùêà ùêÅùêî ùêíùêàÃáùêåùêÜùêÑ ùêàÃáùêãùêÑ ùêäùêîùêãùêãùêÄùêçùêàùêç: /**``",
        reply_markup=keyboard,
    )


@app.on_callback_query(filters.regex("tools"))
async def tools_callback(client: Client, callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton(text="·¥Ñ ú·¥ß·¥õ…¢·¥ò·¥õ", callback_data="tools_callback ai")],
            [
                InlineKeyboardButton(text="…¢œÉœÉ…¢ ü—î", callback_data="tools_callback hb1"),
                InlineKeyboardButton(
                    text="·¥õ·¥õs-·¥†œÉ…™·¥Ñ—î", callback_data="tools_callback hb2"
                ),
                InlineKeyboardButton(text="…™Œ∑Íú∞œÉ", callback_data="tools_callback hb3"),
            ],
            [
                InlineKeyboardButton(text="“ìœÉŒ∑·¥õ", callback_data="tools_callback hb4"),
                InlineKeyboardButton(text="œª·¥ß·¥õ ú", callback_data="tools_callback hb5"),
                InlineKeyboardButton(text="·¥õ·¥ß…¢·¥ß ü ü", callback_data="tools_callback hb6"),
            ],
            [
                InlineKeyboardButton(text="…™œª·¥ß…¢—î", callback_data="tools_callback hb7"),
                InlineKeyboardButton(text=" ú·¥ßs·¥õ·¥ß…¢", callback_data="tools_callback hb8"),
                InlineKeyboardButton(
                    text="s·¥õ…™·¥Ñ·¥ã—î Äs", callback_data="tools_callback hb9"
                ),
            ],
            [
                InlineKeyboardButton(text="“ìœÖŒ∑", callback_data="tools_callback hb10"),
                InlineKeyboardButton(
                    text="«´œÖœÉ·¥õ ü è", callback_data="tools_callback hb11"
                ),
                InlineKeyboardButton(
                    text="·¥õ Ä - ·¥Ö ú", callback_data="tools_callback hb12"
                ),
            ],
            [InlineKeyboardButton(text="‚úØ  ùêÜùêÑùêëùê¢¬∞ ‚úØ", callback_data=f"feature")],
        ]
    )

    await callback_query.message.edit(
        f"``**dŒ±hŒ± fŒ±zlŒ± –≤√≠Ãálg√≠Ãá √≠ÃácÃß√≠Ãán Œ±sÃßŒ±gÃÜ√≠dŒ±k√≠Ãá –≤utœÉnlŒ±rŒ± t√≠klŒ±—á√≠n√≠z. h—îrhŒ±ng√≠Ãá –≤√≠Ãár sœÉrunlŒ± kŒ±rsÃß√≠lŒ±sÃß√≠—áœÉrsŒ±n√≠z –≤urŒ±—áŒ± —áŒ±z√≠n [s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.](t.me/SohbetAlemi)**\n\n**ùêÅùêîÃàùêìùêîÃàùêç ùêäùêéùêåùêîùêìùêãùêÄùêëùêà ùêÅùêî ùêíùêàÃáùêåùêÜùêÑ ùêàÃáùêãùêÑ ùêäùêîùêãùêãùêÄùêçùêàùêç: /**``",
        reply_markup=keyboard,
    )


@app.on_callback_query(filters.regex("back_to_music"))
async def feature_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚öúÔ∏è ùêÑùêäùêãùêÑ ùêÅùêÑùêçùêàÃá¬∞ ‚öúÔ∏è",
                url=f"https://t.me/{app.username}?startgroup=true",
            ),
        ],
        [
            InlineKeyboardButton(text=" ùêåùêîÃàùêôùêàÃáùêä¬∞ ", callback_data="music"),
            InlineKeyboardButton(text=" ùêòùêéÃàùêçùêÑùêìùêàÃáùêå¬∞ ", callback_data="management"),
        ],
        [
            InlineKeyboardButton(text=" ùêÄùêëùêÄùêÇÃßùêãùêÄùêë¬∞ ", callback_data="tools"),
            InlineKeyboardButton(text=" ùêáùêÑùêèùêíùêàÃá¬∞ ", callback_data="settings_back_helper"),
        ],
        [InlineKeyboardButton(text="‚úØ ùêÄùêçùêÄ ùêåùêÑùêçùêîÃà¬∞ ‚úØ", callback_data="go_to_start")],
    ]

    k = f"""**‚ùñ ùêáùêÑùêòùêòùêòùêé {app.mention} ! 

‚îÅ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ‚îÅ
‚ùñ ·¥õ ú…™s …™s œª·¥ßŒ∑·¥ß…¢—îœª—îŒ∑·¥õ | œªœÖs…™·¥Ñ  ôœÉ·¥õ
‚ùñ Œ∑œÉ  ü·¥ß…¢ | ·¥ß·¥Ös œªœÖs…™·¥Ñ | Œ∑œÉ ·¥ò ÄœÉœªœÉ
‚ùñ 24x7  ÄœÖŒ∑ |  ô—îs·¥õ sœÉœÖŒ∑·¥Ö «´œÖ·¥ß ü…™·¥õ è

Kƒ±saca ƒ∞yi Bot :)
‚îÅ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ‚îÅ
‚ùñ ·¥Ñ ü…™·¥Ñ·¥ã œÉŒ∑ ·¥õ ú—î  ú—î ü·¥©  ôœÖ·¥õ·¥õœÉŒ∑ ·¥õœÉ …¢—î·¥õ …™Œ∑“ìœÉ
    ·¥ß ôœÉœÖ·¥õ œª è œªœÉ·¥ÖœÖ ü—îs ·¥ßŒ∑·¥Ö ·¥ÑœÉœªœª·¥ßŒ∑·¥Ös...!

A≈üaƒüƒ±daki Butonlara Dikkat et...
‚îÅ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ ‚îÅ‚îÅ**"""
    await callback_query.message.edit_text(
        text=k,
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


def back_to_music(_):
    upl = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text=_["BACK_BUTTON"],
                    callback_data=f"music",
                ),
            ]
        ]
    )
    return upl


def back_to_tools(_):
    upl = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text=_["BACK_BUTTON"],
                    callback_data=f"tools",
                ),
            ]
        ]
    )
    return upl


def back_to_management(_):
    upl = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text=_["BACK_BUTTON"],
                    callback_data=f"management",
                ),
            ]
        ]
    )
    return upl


@app.on_callback_query(filters.regex("about"))
async def about_callback(client: Client, callback_query: CallbackQuery):
    buttons = [
        [
            InlineKeyboardButton(text="‚ú® ùêòùêÄùêôùêàùêãùêàùêå¬∞ ‚ú®", callback_data="developer"),
            InlineKeyboardButton(text="‚ö° ùêéÃàùêôùêÑùêãùêãùêàÃáùêäùêãùêÑùêë¬∞ ‚ö°", callback_data="feature"),
        ],
        [
            InlineKeyboardButton(text="üìì ùêäùêîùêãùêãùêÄùêçùêåùêÄ ùêäùêãùêÄùêïùêîùêôùêî¬∞ üìì", callback_data="basic_guide"),
            InlineKeyboardButton(text="‚öúÔ∏è ùêòùêÄùêëùêÉùêàùêå¬∞ ‚öúÔ∏è", callback_data="donate"),
        ],
        [InlineKeyboardButton(text="üîô ùêÜùêÑùêëùê¢¬∞ ", callback_data="go_to_start")],
    ]
    await callback_query.message.edit_text(
        f"**ùêáùêÑùêòùêòùêòùêé {app.mention} ‚ú®**\n\n**…¢ Ä·¥ú ô·¥ú…¥·¥ú·¥¢ …™Ãá·¥ÑÃß…™Ãá…¥ s…™Ãá·¥¢·¥á s·¥ò·¥Ä·¥ç's…™·¥¢ ·¥†·¥á ·¥á…¢ÃÜ ü·¥á…¥·¥Ñ·¥á ü…™Ãá  ô…™Ãá Ä ·¥è Ä·¥õ·¥Ä·¥ç s·¥ú…¥·¥Ä…¥ …¢·¥úÃà·¥ÑÃß ü·¥úÃà ·¥†·¥á  ú·¥Ä Ä…™Ãá·¥ã·¥Ä  ô…™Ãá Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥ú·¥ò  è·¥èÃà…¥·¥á·¥õ…™Ãá·¥ç…™Ãá ·¥†·¥á ·¥ç·¥úÃà·¥¢…™Ãá·¥ã ·¥ÑÃß·¥Ä ü·¥Ä Ä  ô·¥è·¥õ·¥ú :)**\n\n**‚óè kullŒ±n√≠c√≠lŒ±r√≠ k√≠s√≠tlŒ±—áŒ±–≤√≠Ãál√≠Ãár√≠Ãám.**\n**‚óè kullŒ±n√≠c√≠lŒ±r√≠ k√≠ÃásÃß√≠Ãás—îll—îsÃßt√≠Ãár√≠Ãál—î–≤√≠Ãál√≠Ãár hœÉsÃßg—îld√≠Ãán√≠Ãáz m—îsŒ±jlŒ±r√≠—álŒ± s—îlŒ±mlŒ±—áŒ±–≤√≠Ãál√≠Ãár v—î hŒ±ttŒ± –≤√≠Ãár grup kurŒ±llŒ±r√≠ –≤—îl√≠Ãárl—î—á—î–≤√≠Ãál√≠Ãár√≠Ãám.**\n**‚óè muÃàz√≠Ãák cÃßŒ±lŒ±r s√≠Ãást—îm√≠Ãám vŒ±r.**\n**‚óè –≤Œ±n, mut—î, hœÉsÃßg—îld√≠Ãán√≠Ãáz, k√≠ck, f—îd—îrŒ±s—áœÉn dŒ±hŒ± –≤√≠ÃárcÃßœÉk g√≠Ãá–≤√≠Ãá grup —áœÉÃàn—ît√≠Ãám œÉÃàz—îll√≠Ãákl—îr√≠Ãán√≠Ãán h—îm—în tuÃàmuÃàn—î sŒ±h√≠Ãá–≤√≠Ãám.**\n**‚óè –≤√≠Ãár nœÉt tutmŒ± s√≠Ãást—îm√≠Ãám, kŒ±rŒ± l√≠Ãást—îl—îr√≠Ãám v—î hŒ±ttŒ± –≤—îl√≠Ãárl√≠Ãá Œ±nŒ±htŒ±r k—îl√≠Ãám—îl—îr—î √≠Ãál√≠ÃásÃßk√≠Ãán œÉÃànc—îd—în –≤—îl√≠Ãárl—înm√≠ÃásÃß c—îvŒ±plŒ±r√≠m vŒ±r.**\n**‚óè h—îrhŒ±ng√≠Ãá –≤√≠Ãár kœÉmutu v—î dŒ±hŒ± fŒ±zlŒ± √≠ÃásÃßl—îm√≠Ãá —áuÃàruÃàtm—îd—în œÉÃànc—î —áœÉÃàn—ît√≠Ãác√≠Ãá √≠Ãáz√≠Ãánl—îr√≠Ãán√≠Ãá kœÉntrœÉl —îd√≠Ãá—áœÉrum. **\n\n**‚ûª ùêÅùêéùêì ùêáùêÄùêäùêäùêàùêçùêÉùêÄ ùêÉùêÄùêáùêÄ ùêÖùêÄùêôùêãùêÄ ùêÅùêàÃáùêãùêÜùêàÃá ùêÄùêãùêåùêÄùêä ùêàÃáùêÇÃßùêàÃáùêç ùêÉùêîÃàùêÜÃÜùêåùêÑùêòùêÑ ùêìùêàùêäùêãùêÄùêòùêàùêç ü¶ö.**",
        reply_markup=InlineKeyboardMarkup(buttons),
    )


# If the back button has different meanings in various panels, you can set different callbacks
@app.on_callback_query(filters.regex("support"))
async def back_button_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(text="üé≠·¥è·¥°…¥·¥á Äüé≠", user_id=config.OWNER_ID[0]),
            InlineKeyboardButton(
                text="üå±…¢…™·¥õ ú·¥ú ôüå±",
                url="https://github.com/AdanaliMuhendis",
            ),
        ],
        [
            InlineKeyboardButton(text="‚õÖ…¢ Ä·¥è·¥ú·¥ò‚õÖ", url=f"{config.SUPPORT_GROUP}"),
            InlineKeyboardButton(text="üéÑ·¥Ñ ú·¥Ä…¥…¥·¥á üüéÑ", url=f"{config.SUPPORT_CHANNEL}"),
        ],
        [InlineKeyboardButton(text="‚úØ ùêÄùêçùêÄ ùêåùêÑùêçùêîÃà¬∞ ‚úØ", callback_data="go_to_start")],
    ]

    await callback_query.message.edit_text(
        "**‡πè ùêáùêÄùêäùêäùêàùêåùêÉùêÄ ùêÉùêÄùêáùêÄ ùêÖùêÄùêôùêãùêÄ ùêÅùêàÃáùêãùêÜùêàÃá ùêÄùêãùêåùêÄùêä ùêàÃáùêÇÃßùêàÃáùêç ùêÉùêîÃàùêÜÃÜùêåùêÑùêòùêÑ ùêìùêàùêäùêãùêÄùêòùêàùêç**\n\n**–≤œÉt'tŒ± h—îrhŒ±ng√≠Ãá –≤√≠Ãár hŒ±tŒ±, sœÉrun –≤ulursŒ±n√≠z v—î—áŒ± –≤œÉt hŒ±kk√≠ndŒ± h—îrhŒ±ng√≠Ãá –≤√≠Ãár g—îr√≠Ãá –≤√≠Ãáld√≠Ãár√≠Ãám —áŒ±pmŒ±k √≠Ãást—îrs—în√≠Ãáz d—îst—îk gru–≤umuzŒ± g—îl—î–≤√≠Ãál√≠Ãárs√≠Ãán√≠Ãáz  (‚úø‚ó†‚Äø‚ó†)**",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


@app.on_callback_query(filters.regex("donate"))
async def settings_back_callback(client: Client, callback_query: CallbackQuery):
    close = [[InlineKeyboardButton(text="‚úØ ùêäùêÄùêèùêÄùêì¬∞ ‚úØ", callback_data="close")]]
    await callback_query.message.reply_video(
        video="assets/AdanaliMuhendis.mp4",
        caption=f"**–≤œÉt'umun œÉÃàz—îll√≠Ãákl—îr√≠Ãán—î v—î g—îl√≠ÃásÃß√≠Ãám√≠Ãán—î —áŒ±rd√≠mc√≠ œÉlmŒ±k √≠ÃácÃß√≠Ãán dœÉgÃÜrudŒ±n –≤Œ±nŒ± m—îsŒ±j Œ±tŒ±–≤√≠Ãál√≠Ãárs√≠Ãán√≠Ãáz...**\n\n** @AdanaliMuhendis",
        reply_markup=InlineKeyboardMarkup(close),
    )


@app.on_callback_query(filters.regex("basic_guide"))
async def settings_back_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [[InlineKeyboardButton(text="‚úØ ùêÜùêÑùêëùê¢¬∞  ‚úØ", callback_data="about")]]
    guide_text = f"**ùêáùêÑùêò ! ùêÅùêî ùêáùêàùêôùêãùêà ùêïùêÑ ùêÅùêÄùêíùêàÃáùêì ùêÅùêàÃáùêë ùêäùêîùêãùêãùêÄùêçùêàùêå ùêäùêàùêãùêÄùêïùêîùêôùêîùêÉùêîùêë** {app.mention} **üéâ**\n\n**ùü∑. ·¥õ…™·¥ã ü·¥Ä è…™…¥…™·¥¢ '‚öúÔ∏è ùêÑùêäùêãùêÑ ùêÅùêÑùêçùêàÃá¬∞ ‚öúÔ∏è'  ô·¥ú·¥õ·¥è…¥·¥ú…¥·¥Ä...**\n**ùü∏.  ô·¥è·¥õ·¥ú ·¥á·¥ã ü·¥á è·¥á·¥Ñ·¥á…¢ÃÜ…™Ãá…¥…™Ãá·¥¢ …¢ Ä·¥ú·¥ò …™Ãás·¥ç…™Ãá…¥…™Ãá s·¥á·¥ÑÃß…™Ãá…¥…™Ãá·¥¢...**\n**ùüπ.  ô·¥è·¥õ'·¥Ä s·¥è Ä·¥ú…¥s·¥ú·¥¢ ·¥†·¥á ·¥õ·¥Ä·¥ç …™ÃásÃß ü·¥á·¥†s·¥á ü ü…™Ãá·¥ã …™Ãá·¥ÑÃß…™Ãá…¥ …¢·¥á Ä·¥á·¥ã ü…™Ãá ·¥õ·¥úÃà·¥ç …™Ãá·¥¢…™Ãá…¥ ü·¥á Ä…™Ãá ·¥†·¥á Ä…™Ãá…¥.**\n\n**·¥ã·¥è·¥ç·¥ú·¥õ ü·¥Ä Ä·¥Ä ·¥á Ä…™ÃásÃß·¥ç·¥á·¥ã …™Ãá·¥ÑÃß…™Ãá…¥ ·¥ç·¥úÃà·¥¢…™Ãá·¥ã ·¥†·¥á è·¥Ä  è·¥èÃà…¥·¥á·¥õ…™Ãá·¥ç ·¥õ·¥á Ä·¥Ñ…™Ãá ú ü·¥á Ä…™Ãá ·¥Ä Ä·¥Äs…™…¥·¥Ö·¥Ä s·¥á·¥ÑÃß…™Ãá·¥ç  è·¥Ä·¥ò·¥Ä ô…™Ãá ü…™Ãá Äs…™Ãá…¥…™Ãá·¥¢.**\n**ùêáùêÑùêëùêáùêÄùêçùêÜùêàÃá ùêÅùêàÃáùêë ùêíùêéùêëùêîùêçùêãùêÄ ùêäùêÄùêëùêíÃßùêàùêëùêíùêÄùêçùêàùêô ùêÉùêÑùêíùêìùêÑùêä ùêàÃáùêÇÃßùêàÃáùêç ùêÅùêàÃáùêôùêÑ ùêîùêãùêÄùêíÃßùêåùêÄùêäùêìùêÄùêç ùêÇÃßùêÑùêäùêàÃáùêçùêåùêÑùêòùêàÃáùêç...‚ú®**"
    await callback_query.message.edit_text(
        text=guide_text, reply_markup=InlineKeyboardMarkup(keyboard)
    )