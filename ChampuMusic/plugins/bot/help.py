import re
from math import ceil
from typing import Union

from pyrogram import Client, filters, types
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message

import config
from config import BANNED_USERS, START_IMG_URL
from strings import get_command, get_string
from ChampuMusic import HELPABLE, app
from ChampuMusic.utils.database import get_lang, is_commanddelete_on
from ChampuMusic.utils.decorators.language import LanguageStart
from ChampuMusic.utils.inline.help import private_help_panel

### Command
HELP_COMMAND = get_command("HELP_COMMAND")

COLUMN_SIZE = 4  # number of  button height
NUM_COLUMNS = 3  # number of button width
class EqInlineKeyboardButton(InlineKeyboardButton):
    def __eq__(self, other):
        return self.text == other.text

    def __lt__(self, other):
        return self.text < other.text

    def __gt__(self, other):
        return self.text > other.text


def paginate_modules(page_n, module_dict, prefix, chat=None, close: bool = False):
    if not chat:
        modules = sorted(
            [
                EqInlineKeyboardButton(
                    x.__MODULE__,
                    callback_data="{}_module({},{})".format(
                        prefix, x.__MODULE__.lower(), page_n
                    ),
                )
                for x in module_dict.values()
            ]
        )
    else:
        modules = sorted(
            [
                EqInlineKeyboardButton(
                    x.__MODULE__,
                    callback_data="{}_module({},{},{})".format(
                        prefix, chat, x.__MODULE__.lower(), page_n
                    ),
                )
                for x in module_dict.values()
            ]
        )

    pairs = [modules[i : i + NUM_COLUMNS] for i in range(0, len(modules), NUM_COLUMNS)]

    max_num_pages = ceil(len(pairs) / COLUMN_SIZE) if len(pairs) > 0 else 1
    modulo_page = page_n % max_num_pages

    if len(pairs) > COLUMN_SIZE:
        pairs = pairs[modulo_page * COLUMN_SIZE : COLUMN_SIZE * (modulo_page + 1)] + [
            (
                EqInlineKeyboardButton(
                    "‚ùÆ",
                    callback_data="{}_prev({})".format(
                        prefix,
                        modulo_page - 1 if modulo_page > 0 else max_num_pages - 1,
                    ),
                ),
                EqInlineKeyboardButton(
                    "·¥Ñ ü·¥ès·¥á" if close else "B·¥Ä·¥Ñ·¥ã",
                    callback_data="close" if close else "feature",
                ),
                EqInlineKeyboardButton(
                    "‚ùØ",
                    callback_data="{}_next({})".format(prefix, modulo_page + 1),
                ),
            )
        ]
    else:
        pairs.append(
            [
                EqInlineKeyboardButton(
                    "·¥Ñ ü·¥ès·¥á" if close else "B·¥Ä·¥Ñ·¥ã",
                    callback_data="close" if close else "feature",
                ),
            ]
        )

    return pairs


@app.on_message(filters.command(HELP_COMMAND) & filters.private & ~BANNED_USERS)
@app.on_callback_query(filters.regex("settings_back_helper") & ~BANNED_USERS)
async def helper_private(
    client: app, update: Union[types.Message, types.CallbackQuery]
):
    is_callback = isinstance(update, types.CallbackQuery)
    if is_callback:
        try:
            await update.answer()
        except:
            pass

        chat_id = update.message.chat.id
        language = await get_lang(chat_id)
        _ = get_string(language)
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))

        await update.edit_message_text(_["help_1"], reply_markup=keyboard)
    else:
        chat_id = update.chat.id
        if await is_commanddelete_on(update.chat.id):
            try:
                await update.delete()
            except:
                pass
        language = await get_lang(chat_id)
        _ = get_string(language)
        keyboard = InlineKeyboardMarkup(
            paginate_modules(0, HELPABLE, "help", close=True)
        )
        if START_IMG_URL:

            await update.reply_photo(
                photo=START_IMG_URL,
                caption=_["help_1"],
                reply_markup=keyboard,
            )

        else:

            await update.reply_text(
                text=_["help_1"],
                reply_markup=keyboard,
            )


@app.on_message(filters.command(HELP_COMMAND) & filters.group & ~BANNED_USERS)
@LanguageStart
async def help_com_group(client, message: Message, _):
    keyboard = private_help_panel(_)
    await message.reply_text(_["help_2"], reply_markup=InlineKeyboardMarkup(keyboard))


async def help_parser(name, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    return keyboard


@app.on_callback_query(filters.regex(r"help_(.*?)"))
async def help_button(client, query):
    home_match = re.match(r"help_home\((.+?)\)", query.data)
    mod_match = re.match(r"help_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back\((\d+)\)", query.data)
    create_match = re.match(r"help_create", query.data)
    language = await get_lang(query.message.chat.id)
    _ = get_string(language)
    top_text = _["help_1"]

    if mod_match:
        module = mod_match.group(1)
        prev_page_num = int(mod_match.group(2))
        text = (
            f"<b><u>Yardƒ±m ƒ∞√ßin Buraya {HELPABLE[module].__MODULE__}:</u></b>\n"
            + HELPABLE[module].__HELP__
        )

        key = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text="‚Ü™Ô∏è ùêÜùêÑùêëùê¢¬∞", callback_data=f"help_back({prev_page_num})"
                    ),
                    InlineKeyboardButton(text="üîÑ ùêäùêÄùêèùêÄùêì¬∞", callback_data="close"),
                ],
            ]
        )

        await query.message.edit(
            text=text,
            reply_markup=key,
            disable_web_page_preview=True,
        )

    elif home_match:
        await app.send_message(
            query.from_user.id,
            text=home_text_pm,
            reply_markup=InlineKeyboardMarkup(out),
        )
        await query.message.delete()

    elif prev_match:
        curr_page = int(prev_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(curr_page, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif next_match:
        next_page = int(next_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(next_page, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif back_match:
        prev_page_num = int(back_match.group(1))
        await query.message.edit(
            text=top_text,
            reply_markup=InlineKeyboardMarkup(
                paginate_modules(prev_page_num, HELPABLE, "help")
            ),
            disable_web_page_preview=True,
        )

    elif create_match:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))

        await query.message.edit(
            text=top_text,
            reply_markup=keyboard,
            disable_web_page_preview=True,
        )

    await client.answer_callback_query(query.id)


# ===================================

from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from config import BANNED_USERS
from strings import helpers
from ChampuMusic import app
from ChampuMusic.utils.decorators.language import languageCB


@app.on_callback_query(filters.regex("music_callback") & ~BANNED_USERS)
@languageCB
async def music_helper_cb(client, CallbackQuery, _):

    callback_data = CallbackQuery.data.strip()

    cb = callback_data.split(None, 1)[1]

    keyboard = back_to_music(_)

    if cb == "hb1":

        await CallbackQuery.edit_message_text(helpers.HELP_1, reply_markup=keyboard)

    elif cb == "hb2":

        await CallbackQuery.edit_message_text(helpers.HELP_2, reply_markup=keyboard)

    elif cb == "hb3":

        await CallbackQuery.edit_message_text(helpers.HELP_3, reply_markup=keyboard)

    elif cb == "hb4":

        await CallbackQuery.edit_message_text(helpers.HELP_4, reply_markup=keyboard)

    elif cb == "hb5":

        await CallbackQuery.edit_message_text(helpers.HELP_5, reply_markup=keyboard)

    elif cb == "hb6":

        await CallbackQuery.edit_message_text(helpers.HELP_6, reply_markup=keyboard)

    elif cb == "hb7":

        await CallbackQuery.edit_message_text(helpers.HELP_7, reply_markup=keyboard)

    elif cb == "hb8":

        await CallbackQuery.edit_message_text(helpers.HELP_8, reply_markup=keyboard)

    elif cb == "hb9":

        await CallbackQuery.edit_message_text(helpers.HELP_9, reply_markup=keyboard)

    elif cb == "hb10":

        await CallbackQuery.edit_message_text(helpers.HELP_10, reply_markup=keyboard)

    elif cb == "hb11":

        await CallbackQuery.edit_message_text(helpers.HELP_11, reply_markup=keyboard)

    elif cb == "hb12":

        await CallbackQuery.edit_message_text(helpers.HELP_12, reply_markup=keyboard)

    elif cb == "hb13":

        await CallbackQuery.edit_message_text(helpers.HELP_13, reply_markup=keyboard)

    elif cb == "hb14":

        await CallbackQuery.edit_message_text(helpers.HELP_14, reply_markup=keyboard)

    elif cb == "hb15":

        await CallbackQuery.edit_message_text(helpers.HELP_15, reply_markup=keyboard)


@app.on_callback_query(filters.regex("developer"))
async def about_callback(client: Client, callback_query: CallbackQuery):
    buttons = [
        [
            InlineKeyboardButton(text=" ùêíùêÄùêáùêàÃáùêè¬∞ ", user_id=config.OWNER_ID[0])
        ],
        [
            InlineKeyboardButton(text=" …™…¥s·¥õ·¥Ä ", url=f"https://www.instagram.com/AdanaliMuhendis/"),
            InlineKeyboardButton(text="  è·¥è·¥ú·¥õ·¥ú ô·¥á ", url=f"https://www.youtube.com/@AdanaliMuhendis"),
        ],
        [
            InlineKeyboardButton(text="üîô ùêÜùêÑùêëùê¢¬∞", callback_data="about")
        ],  # Use a default label for the back button
    ]
    await callback_query.message.edit_text(
        "‚ú¶ **ùêÅùêî ùêÅùêéùêì, ùêÜùêëùêîùêÅùêîùêçùêîùêôùêî ùêòùêéÃàùêçùêÑùêìùêåùêÑùêòùêàÃá ùêäùêéùêãùêÄùêò ùêïùêÑ ùêÉùêÄùêáùêÄ ùêÑùêÜÃÜùêãùêÑùêçùêÇùêÑùêãùêàÃá ùêáùêÄùêãùêÑ ùêÜùêÑùêìùêàÃáùêëùêåùêÑùêä ùêàÃáùêÇÃßùêàÃáùêç ùêòùêÑùêìùêÑùêçùêÑùêäùêãùêàÃá ùêÅùêàÃáùêë ùêÜùêÑùêãùêàÃáùêíÃßùêìùêàÃáùêëùêàÃáùêÇùêàÃá ùêìùêÄùêëùêÄùêÖùêàùêçùêÉùêÄùêç ùêòùêÄùêèùêàùêãùêåùêàùêíÃßùêìùêàùêë..**\n\n‚ú¶ **—áŒ±ln√≠zcŒ± –≤√≠ÃárkŒ±cÃß t√≠klŒ±mŒ± √≠Ãál—î h—îr sÃß—î—á√≠Ãá kœÉntrœÉl —îd—î–≤√≠Ãál√≠Ãárs√≠Ãán√≠Ãáz (sŒ±h√≠Ãá–≤√≠Ãán Œ±—áŒ±rlŒ±r√≠n√≠ Œ±—áŒ±rlŒ±mŒ±k, sudœÉ—îrs'√≠ kœÉntrœÉl —îtm—îk v—î hŒ±ttŒ± hŒ±ttŒ± –≤√≠ÃárkŒ±cÃß t√≠klŒ±mŒ± √≠Ãál—î h—îr sÃß—î—á√≠Ãá kœÉntrœÉl —îd—î–≤√≠Ãál√≠Ãárs√≠Ãán√≠Ãáz.) √≠nstŒ±grŒ±m v—î —áœÉutu–≤—î'u k—îsÃßf—îd√≠Ãán.**\n\n‚ú¶ **ùô±ùôæùöÉ, ùô∂ùöÅùöÑùô±ùöÑùôΩùöÑùöâùöÑ ùöÇùôæùöÅùöÑùôΩùöÇùöÑùöâ ùô±ùô∏ÃáùöÅ ùöÇÃßùô¥ùô∫ùô∏Ãáùôªùô≥ùô¥ ùöàùôæÃàùôΩùô¥ùöÉùôºùô¥ùôΩùô∏Ãáùöâùô¥ ùöÖùô¥ ùôºùöÑÃàùöâùô∏Ãáùô∂ÃÜùô∏ÃáùôΩ ùô∫ùô¥ùöàùôµùô∏ÃáùôΩùô∏Ãá ùô≤Ãßùô∏ùô∫ùô∞ùöÅùôºùô∞ùôΩùô∏ùöâùô∞ ùöàùô∞ùöÅùô≥ùô∏ùôºùô≤ùô∏ ùôæùôªùôºùô∞ùô∫ ùô∏Ãáùô≤Ãßùô∏ÃáùôΩ ùöÉùô∞ùöÇùô∞ùöÅùôªùô∞ùôΩùô≥ùô∏. ùöÇùô∞ùô≥ùô¥ùô≤ùô¥ ùô∞ùöÇÃßùô∞ùô∂ÃÜùô∏ùô≥ùô∞ùô∫ùô∏Ãá ùô≥ùöÑÃàùô∂ÃÜùôºùô¥ùôªùô¥ùöÅùô∏Ãá ùô∫ùöÑùôªùôªùô∞ùôΩùô∏ùôΩ ùöÖùô¥ ùôΩùô¥ ùô∫ùô∞ùô≥ùô∞ùöÅ ùô∫ùôæùôªùô∞ùöà ùôæùôªùô≥ùöÑùô∂ÃÜùöÑùôΩùöÑ ùô∂ùôæÃàùöÅùöÑÃàùôΩ!**",
        reply_markup=InlineKeyboardMarkup(buttons),
    )


@app.on_callback_query(filters.regex("feature"))
async def feature_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚öúÔ∏è ùô±ùöéùöóùöí ùô∂ùöõùöûùöãùöûùöóùöä ùô¥ùöîùöïùöé¬∞ ‚öúÔ∏è",
                url=f"https://t.me/{app.username}?startgroup=true",
            ),
        ],
        [
            InlineKeyboardButton(text="üéß ùêåùêîÃàùêôùêàÃáùêä¬∞ üéß", callback_data="music"),
            InlineKeyboardButton(text="‚ôªÔ∏è ùêáùêÑùêèùêíùêàÃá¬∞ ‚ôªÔ∏è", callback_data="settings_back_helper"),
        ],
        [InlineKeyboardButton(text="‚úØ ùêÄùêçùêÄ ùêåùêÑùêçùêîÃà¬∞ ‚úØ", callback_data="go_to_start")],
    ]
    await callback_query.message.edit_text(
        f"**ùêáùêéùêíÃßùêÜùêÑùêãùêÉùêàÃáùêçùêàÃáùêô** {app.mention}\n\n**M√úZƒ∞K DENEYƒ∞Mƒ∞Nƒ∞Zƒ∞ GELƒ∞≈ûTƒ∞RMEK ƒ∞√áƒ∞N TASARLANMI≈û √áE≈ûƒ∞TLƒ∞ √ñZELLƒ∞KLERƒ∞ KE≈ûFEDƒ∞N. BOT'U KENDƒ∞ GRUBUNUZA VEYA KANALINIZA DAVET ETMEK VE KUSURSUZ M√úZƒ∞K ENTEGRASYONUNUN KEYFƒ∞Nƒ∞ √áIKARMAK ƒ∞√áƒ∞N ùô±ùöéùöóùöí ùô∂ùöõùöûùöãùöûùöóùöä ùô¥ùöîùöïùöé¬∞ BUTONUNA TIKLAYINIZ**",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


@app.on_callback_query(filters.regex("music"))
async def music_callback(client: Client, callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(text="Y√ñNETiCi¬∞", callback_data="music_callback hb1"),
                InlineKeyboardButton(text="YETKƒ∞Lƒ∞¬∞", callback_data="music_callback hb2"),
                InlineKeyboardButton(
                    text="B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ", callback_data="music_callback hb3"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="B ü-C ú·¥Ä·¥õ", callback_data="music_callback hb4"
                ),
                InlineKeyboardButton(
                    text="B ü-Us·¥á Ä", callback_data="music_callback hb5"
                ),
                InlineKeyboardButton(text="C-P ü·¥Ä è", callback_data="music_callback hb6"),
            ],
            [
                InlineKeyboardButton(text="G-B·¥Ä…¥", callback_data="music_callback hb7"),
                InlineKeyboardButton(text="L·¥è·¥è·¥ò", callback_data="music_callback hb8"),
                InlineKeyboardButton(
                    text="M·¥Ä…™…¥·¥õ·¥á…¥·¥Ä…¥·¥Ñ·¥á", callback_data="music_callback hb9"
                ),
            ],
            [
                InlineKeyboardButton(text="P…™…¥…¢", callback_data="music_callback hb10"),
                InlineKeyboardButton(text="P ü·¥Ä è", callback_data="music_callback hb11"),
                InlineKeyboardButton(
                    text="S ú·¥ú“ì“ì ü·¥á", callback_data="music_callback hb12"
                ),
            ],
            [
                InlineKeyboardButton(text="S·¥á·¥á·¥ã", callback_data="music_callback hb13"),
                InlineKeyboardButton(text="S·¥è…¥…¢", callback_data="music_callback hb14"),
                InlineKeyboardButton(text="S·¥ò·¥á·¥á·¥Ö", callback_data="music_callback hb15"),
            ],
            [InlineKeyboardButton(text="‚úØ ùêÜùêÑùêëùê¢¬∞ ‚úØ", callback_data=f"feature")],
        ]
    )

    await callback_query.message.edit(
        f"**DAHA FAZLA Bƒ∞LGƒ∞ ƒ∞√áƒ∞N A≈ûAƒûIDAKƒ∞ BUTONLARA TIKLAYINIZ. HERHANGƒ∞ Bƒ∞R SORUNLA KAR≈ûILA≈ûIYORSANIZ [SUPPORT CHAT](t.me/AdanaliMuhendis)**\n\n**B√úT√úN KOMUTLAR ≈ûUNLARLA KULLANILABƒ∞Lƒ∞R: /**",
        reply_markup=keyboard,
    )


@app.on_callback_query(filters.regex("back_to_music"))
async def feature_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚öúÔ∏è ùô±ùöéùöóùöí ùô∂ùöõùöûùöãùöûùöóùöä ùô¥ùöîùöïùöé¬∞ ‚öúÔ∏è",
                url=f"https://t.me/{app.username}?startgroup=true",
            ),
        ],
        [
            InlineKeyboardButton(text="üéß ùêåùêîÃàùêôùêàÃáùêä¬∞ üéß", callback_data="music"),
            InlineKeyboardButton(text="‚ôªÔ∏è ùêáùêÑùêèùêíùêàÃá¬∞ ‚ôªÔ∏è", callback_data="settings_back_helper"),
        ],
        [InlineKeyboardButton(text="‚úØ ùêÄùêçùêÄ ùêåùêÑùêçùêîÃà¬∞ ‚úØ", callback_data="go_to_start")],
    ]
    await callback_query.message.edit_text(
        f"**ùêáùêéùêíÃßùêÜùêÑùêãùêÉùêàÃáùêçùêàÃáùêô** {app.mention}\n\n**M√úZƒ∞K DENEYƒ∞Mƒ∞Nƒ∞Zƒ∞ GELƒ∞≈ûTƒ∞RMEK ƒ∞√áƒ∞N TASARLANMI≈û √áE≈ûƒ∞TLƒ∞ √ñZELLƒ∞KLERƒ∞ KE≈ûFEDƒ∞N. BOT'U KENDƒ∞ GRUBUNUZA VEYA KANALINIZA DAVET ETMEK VE KUSURSUZ M√úZƒ∞K ENTEGRASYONUNUN KEYFƒ∞Nƒ∞ √áIKARMAK ƒ∞√áƒ∞N ùô±ùöéùöóùöí ùô∂ùöõùöûùöãùöûùöóùöä ùô¥ùöîùöïùöé¬∞ BUTONUNA TIKLAYINIZ**",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


def back_to_music(_):
    upl = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    text=_["BACK_BUTTON"],
                    callback_data=f"music",
                ),
            ]
        ]
    )
    return upl


@app.on_callback_query(filters.regex("about"))
async def about_callback(client: Client, callback_query: CallbackQuery):
    buttons = [
        [
            InlineKeyboardButton(text="‚ú®ùêíùêÄùêáùêàÃáùêè¬∞‚ú®", callback_data="developer"),
            InlineKeyboardButton(text="‚ö°ùêéÃàùêôùêÑùêãùêãùêàÃáùêä¬∞‚ö°", callback_data="feature"),
        ],
        [
            InlineKeyboardButton(text="üììùêìùêÑùêåùêÑùêã ùêäùêàùêãùêÄùêïùêîùêô¬∞üìì", callback_data="basic_guide"),
            InlineKeyboardButton(text="‚öúÔ∏èùêÅùêÄùêÜÃÜùêàùêíÃß¬∞‚öúÔ∏è", callback_data="donate"),
        ],
        [InlineKeyboardButton(text="üîô ùêÜùêÑùêëùê¢¬∞", callback_data="go_to_start")],
    ]
    await callback_query.message.edit_text(
        f"**Selamlar {app.mention} ‚ú®**\n\n**ùô∂ùöÅùöÑùôøùôªùô∞ùöÅùô∏ùôΩùô∏ùöâ ùô∏Ãáùô≤Ãßùô∏ÃáùôΩ ùöÇùôøùô∞ùôº'ùöÇùô∏ùöâ ùöÖùô¥ ùô¥ùô∂ÃÜùôªùô¥ùôΩùô≤ùô¥ùôªùô∏Ãá ùô±ùô∏ÃáùöÅ ùôæùöÅùöÉùô∞ùôº ùöÇùöÑùôΩùô∞ùôΩ ùô∂ùöÑÃàùô≤ÃßùôªùöÑÃà ùöÖùô¥ ùôºùöÑùô∑ùöÉùô¥ùöÇÃßùô¥ùôº ùô±ùô∏ÃáùöÅ ùöÉùô¥ùôªùô¥ùô∂ùöÅùô∞ùôº ùô∂ùöÅùöÑùôø ùöàùôæÃàùôΩùô¥ùöÉùô∏Ãáùôºùô∏Ãá ùöÖùô¥ ùôºùöÑÃàùöâùô∏Ãáùô∫ ùô≤Ãßùô∞ùôªùô∞ùöÅ :)**\ùöó\ùöó**‚óè ùô∫ùöÑùôªùôªùô∞ùôΩùô∏ùô≤ùô∏ùôªùô∞ùöÅùô∏ ùô∫ùô∏ùöÇùô∏ùöÉùôªùô∞ùöàùô∞ùô±ùô∏Ãáùôªùô∏ÃáùöÅùô∏Ãáùôº.**\ùöó**‚óè ùô∫ùöÑùôªùôªùô∞ùôΩùô∏ùô≤ùô∏ùôªùô∞ùöÅùô∏ ùöÇÃßùöÑùôΩùôªùô∞ùöÅùôªùô∞ ùöÇùô¥ùôªùô∞ùôºùôªùô∞ùöàùô∞ùô±ùô∏Ãáùôªùô∏ÃáùöÅùô∏Ãáùôº ùôæÃàùöâùô¥ùôªùôªùô¥ùöÇÃßùöÉùô∏ÃáùöÅùô∏Ãáùôªùô¥ùô±ùô∏Ãáùôªùô∏ÃáùöÅ ùô∑ùôæùöÇÃßùô∂ùô¥ùôªùô≥ùô∏ÃáùôΩùô∏Ãáùöâ ùôºùô¥ùöÇùô∞ùôπùôªùô∞ùöÅùô∏ ùöÖùô¥ ùô∑ùô∞ùöÉùöÉùô∞ ùô±ùô∏ÃáùöÅ ùô∂ùöÅùöÑùôø ùô∫ùöÑùöÅùô∞ùôªùôªùô∞ùöÅùô∏ ùô±ùô¥ùôªùô∏ÃáùöÅùôªùô¥ùöàùô∏ÃáùôΩ.**\ùöó**‚óè ùô±ùô∏ÃáùöÅ ùôºùöÑÃàùöâùô∏Ãáùô∫ ùôæùöàùôΩùô∞ùöÉùô∏ùô≤ùô∏ ùöÇùô∏ÃáùöÇùöÉùô¥ùôºùô∏Ãáùôº ùöÖùô∞ùöÅ.**\ùöó**‚óè ùôΩùô¥ùöÅùô¥ùô≥ùô¥ùöàùöÇùô¥ ùöÉùöÑÃàùôº ùô±ùô¥ùô∫ùôªùô¥ùôΩùô¥ùôΩ ùô∂ùöÅùöÑùôø ùöàùôæÃàùôΩùô¥ùöÉùô∏Ãáùôº ùôæÃàùöâùô¥ùôªùôªùô∏Ãáùô∫ùôªùô¥ùöÅùô∏Ãáùôº ùöÖùô∞ùöÅ, ùô±ùô∞ùôΩ, ùöÇùô¥ùöÇùöÇùô∏Ãáùöâ, ùô∑ùôæùöÇÃßùô∂ùô¥ùôªùô≥ùô∏ÃáùôΩùô∏Ãáùöâ, ùô∫ùô∏ùô≤ùô∫, ùôµùô¥ùô≥ùô¥ùöÅùô∞ùöÇùöàùôæùôΩ, ùöÖùô¥ ùô≥ùô∞ùô∑ùô∞ ùôµùô∞ùöâùôªùô∞ùöÇùô∏.**\ùöó**‚óè ùô±ùô∏ÃáùöÅ ùôΩùôæùöÉ ùöÉùöÑùöÉùôºùô∞ ùöÇùô∏ÃáùöÇùöÉùô¥ùôºùô∏Ãáùôº, ùô∫ùô∞ùöÅùô∞ ùôªùô∏ÃáùöÇùöÉùô¥ùôªùô¥ùöÅùô∏Ãáùôº ùöÖùô¥ ùô∑ùô∞ùöÉùöÉùô∞ ùô±ùô¥ùôªùô∏ÃáùöÅùôªùô∏Ãá ùô∞ùôΩùô∞ùô∑ùöÉùô∞ùöÅ ùô∫ùô¥ùôªùô∏Ãáùôºùô¥ùôªùô¥ùöÅùôªùô¥ ùô∏Ãáùôªùô∂ùô∏Ãáùôªùô∏Ãá ùôæÃàùôΩùô≤ùô¥ùô≥ùô¥ùôΩ ùô±ùô¥ùôªùô∏ÃáùöÅùôªùô¥ùôΩùôºùô∏ÃáùöÇÃß ùô≤ùô¥ùöÖùô∞ùôøùôªùô∞ùöÅùô∏ùôº ùöÖùô∞ùöÅ.**\ùöó**‚óè ùô∑ùô¥ùöÅùô∑ùô∞ùôΩùô∂ùô∏Ãá ùô±ùô∏ÃáùöÅ ùô∫ùôæùôºùöÑùöÉ ùöÖùô¥ ùô≥ùô∞ùô∑ùô∞ ùôµùô∞ùöâùôªùô∞ ùöÇÃßùô¥ùöàùô∏Ãá ùöàùöÑÃàùöÅùöÑÃàùöÉùôºùô¥ùô≥ùô¥ùôΩ ùôæÃàùôΩùô≤ùô¥ ùöàùôæÃàùôΩùô¥ùöÉùô∏Ãáùô≤ùô∏Ãáùôªùô¥ùöÅùô∏ÃáùôΩ ùô∏Ãáùöâùô∏ÃáùôΩùôªùô¥ùöÅùô∏ÃáùôΩùô∏Ãá ùô∫ùôæùôΩùöÉùöÅùôæùôª ùô¥ùô≥ùô∏ÃáùôΩ. **\ùöó\ùöó**‚ûª ùô±ùôæùöÉ ùô∑ùô∞ùô∫ùô∫ùô∏ùôΩùô≥ùô∞ ùô≥ùô∞ùô∑ùô∞ ùôµùô∞ùöâùôªùô∞ ùô±ùô∏Ãáùôªùô∂ùô∏Ãá ùô∞ùôªùôºùô∞ùô∫ ùô∏Ãáùô≤Ãßùô∏ÃáùôΩ ùô≥ùöÑÃàùô∂ÃÜùôºùô¥ùöàùô¥ ùöÉùô∏ùô∫ùôªùô∞ùöàùô∏ùôΩ ü¶ö.**",
        reply_markup=InlineKeyboardMarkup(buttons),
    )


# If the back button has different meanings in various panels, you can set different callbacks
@app.on_callback_query(filters.regex("support"))
async def back_button_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [
        [
            InlineKeyboardButton(text="üé≠ùêíùêÄùêáùêàÃáùêè¬∞üé≠", user_id=config.OWNER_ID[0]),
            InlineKeyboardButton(
                text="üå±…¢…™·¥õ ú·¥ú ôüå±",
                url="https://github.com/AdanaliMuhendis",
            ),
        ],
        [
            InlineKeyboardButton(text="‚õÖùêÜùêëùêîùêè¬∞‚õÖ", url=f"{config.SUPPORT_GROUP}"),
            InlineKeyboardButton(text="üéÑùêäùêÄùêçùêÄùêã¬∞üéÑ", url=f"{config.SUPPORT_CHANNEL}"),
        ],
        [InlineKeyboardButton(text="‚úØ ùêÄùêçùêÄ ùêåùêÑùêçùêîÃà¬∞ ‚úØ", callback_data="go_to_start")],
    ]

    await callback_query.message.edit_text(
        "**‡πè ùêáùêÄùêäùêäùêàùêåùêÉùêÄ ùêÉùêÄùêáùêÄ ùêÖùêÄùêôùêãùêÄ ùêÅùêàÃáùêãùêÜùêàÃá ùêÄùêãùêåùêÄùêä ùêàÃáùêÇÃßùêàÃáùêç ùêÉùêîÃàùêÜÃÜùêåùêÑùêòùêÑ ùêìùêàùêäùêãùêÄùêòùêàùêç**\ùêß\ùêß**ùêÅùêéùêì'ùêìùêÄ ùêáùêÑùêëùêáùêÄùêçùêÜùêàÃá ùêÅùêàÃáùêë ùêáùêÄùêìùêÄ ùêïùêÑùêòùêÄ ùêáùêÄùêìùêÄ ùêÅùêîùêãùêîùêëùêíùêÄùêçùêàùêô ùêïùêÑùêòùêÄ ùêÅùêéùêì ùêáùêÄùêäùêäùêàùêçùêÉùêÄ ùêáùêÑùêëùêáùêÄùêçùêÜùêàÃá ùêÅùêàÃáùêë ùêÜùêÑùêëùêàÃá ùêÅùêàÃáùêãùêÉùêàÃáùêëùêàÃáùêå ùêïùêÑùêëùêåùêÑùêä ùêàÃáùêíùêìùêàÃáùêòùêéùêëùêíùêÄùêçùêàùêô ùêÉùêÑùêíùêìùêÑùêä ùêÜùêëùêîùêÅùêîùêçùêÄ ùêÜùêÑùêãùêàÃáùêçùêàÃáùêô (‚úø‚ó†‚Äø‚ó†)* *",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


@app.on_callback_query(filters.regex("donate"))
async def settings_back_callback(client: Client, callback_query: CallbackQuery):
    close = [[InlineKeyboardButton(text="‚úØ ùêäùêÄùêèùêÄùêì¬∞ ‚úØ", callback_data="close")]]
    await callback_query.message.reply_photo(
        photo="https://te.legra.ph/Alem-Music-05-27",
        caption=f"**ùêÄùê•ùêûùê¶ ùêåùêÆÃàùê≥ùê¢ùê§ ùêÅùê®ùê≠ HER GE√áEN G√úN DAHA DA GELƒ∞≈ûMEYE DEVAM EDECEKTƒ∞R!**",
        reply_markup=InlineKeyboardMarkup(close),
    )

#CAPTION A√áIKLAMASI : BOT'UMUN √ñZELLƒ∞KLERƒ∞Nƒ∞ VE GELƒ∞≈ûƒ∞Mƒ∞Nƒ∞ GELƒ∞≈ûTƒ∞RMEYE YARDIMCI OLMAK ƒ∞√áƒ∞N DOƒûRUDAN BAƒûI≈û YAPARAK KODLAMA YOLCULUƒûUMU DESTEKLEYƒ∞N.**\n\n** KATKILARINIZ YENƒ∞Lƒ∞K√áƒ∞, KULLANICI DOSTU ARA√áLARIN VE HEYECAN VERƒ∞Cƒ∞ BOT KABƒ∞Lƒ∞YETLERƒ∞Nƒ∞N OLU≈ûTURULMASINA DOƒûRUDAN FON VERECEKTƒ∞R.**\n\n* *KODU TARAYIN VE √ñDEME YAPIN; ZORLUK YOK, YENƒ∞ √ñZELLƒ∞KLERƒ∞ HAYATA GETƒ∞RMENƒ∞N VE DESTEKLEMENƒ∞N HIZLI Bƒ∞R YOLU.**\n\n** HER BAƒûI≈û, B√úY√úK VEYA K√ú√á√úK, BU PROJEYƒ∞ ƒ∞LERLEMEDE √áOK YOL A√áAR ƒ∞LERƒ∞. BU HEYECAN VERƒ∞Cƒ∞ YOLCULUK OLDUƒûUNUZ ƒ∞√áƒ∞N TE≈ûEKK√úR EDERƒ∞Z!

@app.on_callback_query(filters.regex("basic_guide"))
async def settings_back_callback(client: Client, callback_query: CallbackQuery):
    keyboard = [[InlineKeyboardButton(text="‚úØ ùêÜùêÑùêëùê¢¬∞ ‚úØ", callback_data="about")]]
    guide_text = f"**ùêáùêÑùêò! ùêÅùêî ùêáùêàùêôùêãùêà ùêïùêÑ ùêÅùêÄùêíùêàÃáùêì ùêÅùêàÃáùêë ùêäùêîùêãùêãùêÄùêçùêàùêå ùêäùêàùêãùêÄùêïùêîùêôùêîùêÉùêîùêë** {app.mention} **üéâ**\n\n**1. 'ùô±ùöéùöóùöí ùô∂ùöõùöûùöãùöûùöóùöä ùô¥ùöîùöïùöé¬∞' Butonuna tƒ±klayƒ±nƒ±z.**\n**2. Botu eklemek istediƒüiniz Grup/Kanal ismine tƒ±klayƒ±nƒ±z.**\n**3. SORUNSUZ VE TAM ƒ∞≈ûLEVSELLƒ∞K ƒ∞√áƒ∞N BOT'A GEREKLƒ∞ T√úM ƒ∞Zƒ∞NLERƒ∞ VERƒ∞N.**\n\n**KœÉmutlŒ±rŒ± —îr√≠ÃásÃßm—îk √≠ÃácÃß√≠Ãán muÃàz√≠Ãák v—î—áŒ± —áœÉÃàn—ît√≠Ãám t—îrc√≠Ãáhl—îr√≠Ãá Œ±rŒ±s√≠ndŒ± s—îcÃß√≠Ãám —áŒ±pŒ±–≤√≠Ãál√≠Ãárs√≠Ãán√≠Ãáz.**\n**ùêáùêÄùêãùêÄ ùêáùêÑùêëùêáùêÄùêçùêÜùêàÃá ùêÅùêàÃáùêë ùêíùêéùêëùêîùêçùêãùêÄ ùêäùêÄùêëùêíÃßùêàùêãùêÄùêíÃßùêàùêòùêéùêëùêíùêÄùêçùêàùêô ùêÉùêÑùêíùêìùêÑùêä ùêàÃáùêÇÃßùêàÃáùêç ùêÅùêàÃáùêôùêÑ ùêîùêãùêÄùêíÃßùêàùêçùêàùêô... ‚ú®**"
    await callback_query.message.edit_text(
        text=guide_text, reply_markup=InlineKeyboardMarkup(keyboard)
    )